#!/bin/csh
#
# Download and assemble high frequency borehole strain
# data from source files held by IRIS-DMC
#
# Wishlist
# 	* convert to non-csh script (python?)
# Notes
# 	* If more echo-type output is added to this script, separate
# 	  the information by tabs, and change results interpreter inside
# 	  R-func strain::hfbsm.
#
# Versions
#
# 2.3 -- Jun 2018 -- AJB -- repo url to https
# 2.2 -- Dec 2017 -- AJB -- ftp to wget
#	2.1 -- Nov 2014 -- AJB -- fixed repository change and csh octal issue
#	2.0 -- Oct 2013 -- AJB
#
if ( $#argv == 0 || $#argv < 8 ) then
    echo
    echo " Script to download high-frequency strain data"
    echo
    echo "	$0 Bnum 16-character-code start_year  start_day_of_yr  start_time  end_year end_day_of_year end_time [[samp] .py_dir]"
    echo "  e.g.	$0 B073 varian073bcs2006 2009 105 13:00:00  2009 105 16:00:00"
    echo "      	$0 B084 pinyon084bcs2006 2010 094 '23:00:00'  2010 095 '00:59:59' 1"
    echo "      	$0 B073 varian073bcs2006 2009 105 13:00:00  2009 105 13:01:00 20"
    echo
    echo "      This should produce, for example:"
    echo "	  B073.ALL_20.r.txt  raw        data for 4 channels (nanostrain)"
    echo "	  B073.ALL_20.l.txt  linearized data for 4 channels (nanostrain)"
    echo "	  prof.bottle,prof.bottlemerge"
    echo
    echo "	** defaults to 20Hz, but will accept 1 Hz as first optional arg **"
    echo
    echo "	** assumes bottle*.py are under '.', but will accept dir as second optional arg **"
    echo
    echo "      ** Code writes cProfile binary files for testing for bottlenecks;"
    echo "      see https://docs.python.org/2/library/profile.html#module-cProfile"
    echo
    exit 0
endif

########### set variables   ########################

set name=$1
set long=$2
set syear=$3
set sday=$4
set start=$5
set eyear=$6
set eday=$7
set tend=$8

if ($#argv == 8) then
    # default to 20Hz
    set samp=20
    set pydir="."
else if ($#argv == 9) then
    set samp=$9
    set pydir="."
else if ($#argv == 10) then
    set samp=$9
    set pydir=$10
else
    set samp=1
    set pydir="."
endif

if ($name == "NULL") then
    echo "invalid 4-char name"
    exit 1
endif

if ($long == "NULL") then
    echo "invalid 16-char name"
    exit 1
endif

switch ($samp)
    case 1:
        set samp = "01"
        set sampflag = 1
        breaksw
    case 20:
        set samp = "20"
        set sampflag = 20
        breaksw
    default:
        echo "invalid sampling: must be 1 (one) or 20 (twenty)"
        exit 1
endsw

# Strip down the input args ...
#
set edaytest=`echo ${sday} | awk '{print $1*1}'`

set shour=`echo $start | awk 'BEGIN{FS=":"}{print $1}' `
set smin=`echo $start | awk 'BEGIN{FS=":"}{print $2}' `
set ssec=`echo $start | awk 'BEGIN{FS=":"}{print $3}' `

set ehour=`echo $tend | awk 'BEGIN{FS=":"}{print $1}' `
set emin=`echo $tend | awk 'BEGIN{FS=":"}{print $2}' `
set esec=`echo $start | awk 'BEGIN{FS=":"}{print $3}' `

# minute is minimum length of output, so clip to nearest minute
# to prevent a full day
set emin=`echo $syear $sday $shour $smin $eyear $eday $ehour $emin | awk '{if ($1==$5){ if ($2==$6){ if ($3==$7) { if ($4==$8){ $8=$4+1}}}}; printf"%02i",$8}'`

echo "${name}	${long}"
echo "	from	${syear} ${sday} ${shour} ${smin}"
echo "	to	${eyear} ${eday} ${ehour} ${emin}"
echo "	Hz	${samp}"

# Python command, with profiling
#  (> sudo easy_install cprofilev)
#  > cprofilev prof.bottlemerge
#  (Navigate to http://localhost:4000)
set PYCMD_BM="python -m cProfile -o prof.bottlemerge ${pydir}/bottlefile_merge.py"
# -t turns on timestamps
# can set -b if system is big-endian
set PYCMD_B="python -m cProfile -o prof.bottle ${pydir}/bottlefile.py -t"
#

########## get data ######################

# some dummy values because of csh interpreting leading zeros as octal chars -- wtf!?
set dummy=100
set dummy2=1000

set year=$syear
set day=`echo $sday | awk '{print $1*1}'`
@ day = ${day} + ${dummy2}
set limitday=366
@ limitday = ${limitday} + ${dummy2}

while ( $year <= $eyear )
    if ( $year == $eyear ) set limitday=`echo $eday ${dummy2} | awk '{print $1 + $2}'`
    while ( $day <= $limitday )
		set fiday=`echo ${day} ${dummy2} | awk '{ printf "%03i\n", $1 - $2}' `
		set  sy=`echo $year | awk '{ printf "%02i\n", $1-2000 }' `
		#
		# NCEDC turned off raw storage shortly before the end of 2013 (WTF?!)
		#  set repos="ftp://www.ncedc.org/pub/pbo/strain/raw/bsm/${long}/${year}/${day}"
		#
		# IRIS is apparently still archiving data
		#  http://www.iris.edu/pbo/raw/bsm/
		#  will not work --> set repos="ftp://ftp.iris.edu/pub/pbo/raw/bsm/${long}/${year}/${day}"
		#
		# Nov 26 2014 -- changed again?? Working OK now.
		#  set repos="http://www.iris.edu/pbo/raw/bsm/${long}/${year}/${day}"
		#
		# set repos="http://www.iris.washington.edu/pbo/raw/bsm/${long}/${year}/${fiday}"
		#set repos="http://ds.iris.edu/pbo/raw/bsm/${long}/${year}/${fiday}"
		#
		set repos="https://ds.iris.edu/pbo/raw/bsm/${long}/${year}/${fiday}"
		#                 ^^^^ this location may change
		#
		set tarfile="${name}.${year}${fiday}_${samp}.tar"
		echo ${repos}
		# -V prior to inetutils implementation... -v now, but wget better
		#ftp -V ${repos}/${tarfile}
		wget --no-verbose -O ${tarfile} ${repos}/${tarfile}
		tar -xf ${tarfile}
		rm -f ${tarfile}
		@ day ++
    end
    set day=${dummy2}
    @ day ++
    @ year ++
end

## unpack day and hour tars , select files inside start and end times ##

set year=$syear
set day=`echo ${sday} | awk '{print $1*1}'`
@ day = ${day} + ${dummy}
set limitday=366
@ limitday = ${limitday} + ${dummy}
set hour=`echo ${shour} | awk '{print $1*1}'`
@ hour = ${hour} + ${dummy}
set limithour=23
@ limithour = ${limithour} + ${dummy}

while ( $year <= $eyear )
    if ( $year == $eyear )  set limitday=`echo ${eday} ${dummy} | awk '{print $1 + $2}'`
    while ( $day <= $limitday )
        set fiday=`echo $day ${dummy} | awk '{ printf "%03i\n", $1-$2}' `
        set sy=`echo $year  | awk '{ printf "%02i\n", $1-2000 }' `
        if ( $day == ${edaytest} ) set limithour=$ehour
        while ( $hour <= $limithour )
            set fihour=`echo ${hour} ${dummy} | awk '{ printf"%02i\n",$1-$2}' `
	    	#echo ${name} ${sy} ${day} ${fiday} ${hour} ${fihour} ${dummy}
            set tfi="${name}${sy}${fiday}${fihour}"
            if ( ${sampflag} == 1 ) then
                tar -xf ${tfi}.tgz 
            else
                tar -xf ${tfi}_${samp}.tar
            endif
            @ hour ++
        end
        set hour=${dummy};
        @ day ++
    end
    set day=${dummy}
    @ day ++
    @ year ++
end

if ( ${sampflag} == 1 ) then
    rm -f ${name}???????.tgz
else
	## unpack minute files ##
    rm -f ${name}???????_${samp}.tar
    foreach file (`ls ${name}?????????_${samp}.tgz`)
        tar xfz $file
        rm -f $file
    end
endif

####  append channel files #####

if ( ${sampflag} == 1 ) then
    foreach c (CH0 CH1 CH2 CH3)
		set year=$syear
		set day=`echo ${sday} | awk '{print $1*1}'`
		@ day = ${day} + ${dummy}
		set limitday=366
		@ limitday = ${limitday} + ${dummy}
		set hour=`echo ${shour} | awk '{print $1*1}'`
		@ hour = ${hour} + ${dummy}
		set limithour=23
		@ limithour = ${limithour} + ${dummy}
		set flag=2
		#echo ${c}
        while ( $year <= $eyear )
            if ( $year == $eyear ) set limitday=`echo ${eday} ${dummy} | awk '{print $1 + $2}'`
            while ( $day <= ${limitday} )
				set fiday=`echo $day ${dummy} | awk '{ printf "%03i\n", $1-$2}' `
                set sy=`echo $year  | awk '{ printf "%02i\n", $1-2000 }' `
                if ($day == ${limitday}) set limithour=`echo $ehour ${dummy} | awk '{print $1 + $2}'`
                while ( $hour <= ${limithour} )
                    set fihour=`echo ${hour} ${dummy} | awk '{ printf"%02i\n",$1 - $2}' `
                    set cfi="${name}${sy}${fiday}${fihour}${c}"
                    if ( ${flag} == 2 ) then
                        cp ${cfi} ${name}.${c}_${samp}
                        set flag=1
                    else
                        ${PYCMD_BM} ${name}.${c}_${samp} ${cfi} ${name}.${c}_${samp}
                    endif
                    @ hour ++
                end
                @ day ++
                set hour=${dummy}
            end
            @ year ++
            set day=${dummy}
	    @ day ++
        end
    end 
    rm -f ${name}???????CH?
else
    foreach c (CH0 CH1 CH2 CH3)
		set year=$syear
		set day=`echo $sday | awk '{print $1*1}'`
		@ day = ${day} + ${dummy}
		set limitday=366
		@ limitday = ${limitday} + ${dummy}
		set hour=$shour
		@ hour = ${hour} + ${dummy}
		set limithour=23
		@ limithour = ${limithour} + ${dummy}
		set min=$smin
		@ min = ${min} + ${dummy}
		set limitmin=59
		@ limitmin = ${limitmin} + ${dummy}
		set flag=2
		#echo ${c}
        while ( $year <= $eyear )
            if ( $year == $eyear ) set limitday=`echo $eday ${dummy} | awk '{print $1 + $2}'`
            while ( $day <= ${limitday} )
                set fiday=`echo $day ${dummy} | awk '{ printf "%03d\n", $1 - $2}' `
                set sy=`echo $year  | awk '{ printf "%02d\n", $1-2000 }' `
                if ( $day == ${limitday} ) set limithour=`echo $ehour ${dummy} | awk '{print $1 + $2}'`
                while ( $hour <= ${limithour} )
                    set fihour=`echo $hour ${dummy} | awk '{ printf"%02d\n",$1 - $2}' `
                    if ( ${hour} == ${limithour} ) set limitmin=`echo $emin ${dummy} | awk '{print $1 + $2}'`
                    while ( ${min} < ${limitmin} )
                        set fimin=`echo ${min} ${dummy} | awk '{ printf	"%02d\n", $1 - $2}'`
                        set sfi="${name}${sy}${fiday}${fihour}${fimin}${c}_${samp}"
                        if ( ${flag} == 2 ) then
                            cp ${sfi} {$name}.${c}_${samp}
                            set flag=1
                        else
                            ${PYCMD_BM} ${name}.${c}_${samp} ${sfi} ${name}.${c}_${samp}
                        endif
					@ min++ 
                    end
                    @ hour ++
                    set min=${dummy}
                end
                @ day ++
                set hour=${dummy}
            end
            @ year ++
            set day=${dummy}
	    @ day ++
        end
    end
    rm -f ${name}?????????CH?_${samp}
endif

####### make ascii linearized data ##########

# Decide instrument gap
# first batch have gap = 0.002 
#	[B001][B003][B004][B005][B006][B007][B009][B010][B011]
#	[B012][B018][B022][B024][B035][B081][B082][B086][B087]:
# others have gap = 0.001...

switch ($name)
case [B][0][0]?
    set gap=0.0002
    breaksw
case [B][0][1][0128]
    set gap=0.0002
    breaksw
case [B][0][2][24]
    set gap=0.0002
    breaksw
case [B][0][8][1267]
    set gap=0.0002
    breaksw
default:
    set gap=0.0001
    breaksw
endsw

foreach c (CH0 CH1 CH2 CH3)
    # result is in nanostrain
    set botfi="${name}.${c}_${samp}"
    ${PYCMD_B} ${botfi} > ${botfi}.r.txt
    # linearize
    cat ${botfi}.r.txt | awk '{  di=($3/1e+8)/(1-($3/1e+8)) ; if (f == 0 && $3 != 999999) {d0=di;f=1}; if (/999999/) printf ("%s %s	999999\n", $1, $2, $3) ; else printf("%s %s	%14.9f \n", $1,$2, ((di-d0)*'$gap'/0.087)*1e+9)  }' > ${botfi}.l.txt
    rm -f ${botfi}
end

# make full files
set allfi="${name}.ALL_${samp}"

#

if ( -e ${allfi}.r.txt ) then 
	## remove prior results ##
	rm -f ${allfi}.[rl].txt
endif
 
#
# Awk script to format the output nicely
cat << XXX > /tmp/tmpawk.pp
BEGIN{
	printf"%26s  %-8s\tCH0\t\tCH1\t\tCH2\t\tCH3\n","Datetime","RelInd"
}{
	printf"%sT%-15s  %-8g\t%f\t%f\t%f\t%f\n",\$1,\$2,NR,\$3,\$6,\$9,\$12
}
XXX
#
paste ${name}.CH[0-3]_${samp}.l.txt | awk -f /tmp/tmpawk.pp >  ${allfi}.l.txt
paste ${name}.CH[0-3]_${samp}.r.txt | awk -f /tmp/tmpawk.pp >  ${allfi}.r.txt

ls ${allfi}.[lr].txt

# cleanup
rm ${name}.CH[0-3]_${samp}.[lr].txt

exit 0
